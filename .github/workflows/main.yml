name: Deploy jB-Superset

on:
  push:
    branches:
      - main

jobs:
  build-frontend:
    name: Build Superset Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./superset-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '^18.19.1'
          cache: 'npm'
          cache-dependency-path: 'superset-frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-assets
          path: superset/static/assets/

  build-and-push-docker:
    name: Build Docker Image and Run Tests
    needs: build-frontend
    environment: production
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-assets
          path: ./superset/static/assets/

      - name: Verify artifact contents
        run: ls -R ./superset/static/assets

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
          SHORT_SHA: ${{ github.sha }}
        run: |
          SHORT_SHA=$(echo $SHORT_SHA | cut -c 1-7)
          docker buildx build \
          --file no-frontend.Dockerfile \
          --tag $ECR_REGISTRY:$SHORT_SHA \
          --tag $ECR_REGISTRY:latest \
          --platform linux/arm64 \
          --cache-to type=registry,ref=$ECR_REGISTRY:cache,mode=max \
          --cache-from type=registry,ref=$ECR_REGISTRY:cache \
          --push \
          .
           echo "image=$ECR_REGISTRY:$SHORT_SHA" >> $GITHUB_OUTPUT

  deploy-to-ec2:
    name: Deploy Docker Image to Server
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create min_docker Folder
        run: |
          mkdir min_docker
          cp -r docker/pythonpath_dev docker/docker-bootstrap.sh docker/docker-init.sh min_docker/

      - name: Add Local Requirements
        run: |
          cd min_docker
          cat << 'EOF' > requirements-local.txt
          ${{ vars.REQUIREMENTS }}
          EOF

      - name: Copy min_docker to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: min_docker
          target: ~/jB-superset

      - name: Copy docker-compose-prod to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: docker-compose-prod.yml
          target: ~/jB-superset

      - name: Rename files
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/jB-superset
            mv docker-compose-prod.yml docker-compose.yml
            mv min_docker docker

      - name: Create .env File on Server
        uses: appleboy/ssh-action@v1.2.2
        env:
          IMAGE_NAME: ${{ needs.build-and-push-docker.outputs.image_name }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/jB-superset
            cat << 'EOF' > .env
            ${{ secrets.ENV }}
            SUPERSET_IMAGE=${{ env.IMAGE_NAME }}
            EOF

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.2.2
        env:
          IMAGE_NAME: ${{ needs.build-and-push-docker.outputs.image_name }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/jB-superset
            aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ECR_REGISTRY }};
            docker pull ${{ env.IMAGE_NAME }}
            docker-compose up -d --no-build